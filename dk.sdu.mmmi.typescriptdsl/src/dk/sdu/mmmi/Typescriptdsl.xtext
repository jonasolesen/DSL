grammar dk.sdu.mmmi.Typescriptdsl with org.eclipse.xtext.common.Terminals

generate typescriptdsl "http://www.sdu.dk/mmmi/Typescriptdsl"

Database:
	'database' name=ID
	
	config += Config*
	
	tables += Table+
	
	functions += TableFunction*
;

Config returns Config:
	{ConfigProvider} 'provider' value=STRING |
	{ConfigUrl} 'url' value=STRING |
	{ConfigPort} 'port' value=INT |
	{ConfigUsername} 'username' value=STRING |
	{ConfigPassword} 'password' value=STRING
;

Table:
	'table' name=ID ('extends' superType=[Table])? ':'
		attributes+=Attribute+
;

Attribute:
	name=ID ':' type=AttributeType (optional?='?')? (primary?='primary')? 
		('constraint' constraint=OrConstraint)?
;

TableFunction:
	'functions' '<' table=[Table] '>:'
		functions+=BaseFunction*
;

BaseFunction:
	name=ID ':' body=(FunctionRead | FunctionCreate | FunctionUpdate | FunctionDelete)
;

FunctionCreate returns Function:
	{FunctionCreate} 'create' data=FunctionCreateParameter (select=FunctionSelect)?
;

FunctionRead returns Function:
	{FunctionRead} 'read' where=FunctionReadParameter (select=FunctionSelect)?
;

FunctionUpdate returns Function:
	{FunctionUpdate} 'update' where=FunctionReadParameter 'set' data=FunctionWriteParameter
;

FunctionDelete returns Function:
	{FunctionDelete} 'delete' where=FunctionReadParameter
;

FunctionReadParameter:
	'(' parameters+=AttributeOrConstraint (',' parameters+=AttributeOrConstraint)* ')'
;

FunctionWriteParameter:
	'(' records+=Record (',' records+=Record)* ')'
;

FunctionCreateParameter:
	'(' parameters+=AttributeOrRecord (',' parameters+=AttributeOrRecord)* ')'
;

Record:
	key=[Attribute] ':' value=Literal
;

Literal:
    {IntegerLiteral} value=INT | {StringLiteral} value=STRING | {BooleanLiteral} value=Boolean
;

Boolean:
	'true' | 'false'
;

FunctionSelect:
	'select' attributes+=[Attribute]+
;

AttributeOrConstraint returns MaybeAttribute:
	attribute=[Attribute] | constraint=FunctionComparison
;

AttributeOrRecord returns MaybeAttribute:
	attribute=[Attribute] | record=Record
;

OrConstraint returns Constraint:
	AndConstraint ('||' {Or.left=current} right=AndConstraint)* 
;

AndConstraint returns Constraint:
	Condition ('&&' {And.left=current} right=Condition)*
;

FunctionComparison:
	left=[Attribute] operator=Operator right=Literal
;

Condition returns Constraint:
	Comparison |
	{RegexConstraint} value=STRING |
	{BooleanConstraint} left=[Attribute] operator=('==') right=Boolean |
	{StringConstraint} left=[Attribute] operator=('==' | '!=' | 'contains') right=STRING
;

Comparison:
	left=Expression operator=Operator right=Expression
;

Expression returns Expression:
	Factor ( ('+' {Add.left=current} | '-' {Sub.left=current}) right=Factor)*
;

Factor returns Expression:
	Primitive ( ('*' {Mul.left=current} | '/' {Div.left=current}) right=Primitive)*
;

Primitive returns Expression:
	Field | NumberExp | Parenthesis
;

Operator returns Operator: 
	{Gt} '>' | {Gte} '>=' | {Lt} '<' | {Lte} '<=' | {Equal} '==' | {NotEqual} '!=' | {Contains} 'contains'
;

Field:
	attribute=[Attribute]
;

Parenthesis:
	'(' exp=Expression ')'
;

NumberExp:
	value=INT
;

AttributeType returns AttributeType:
	PrimaryType | TableType
;

PrimaryType returns PrimaryType:
	{IntType} 'int' | {StringType} 'string' | {DateType} 'date' | {BoolType} 'boolean'
;

TableType returns TableType:
	table=[Table]
;